knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# do we have duplicate data
data_demographics_raw |>
count(subject) |>
arrange(desc(n))
dat_unique_id <- data_demographics_raw |>
rename(unique_id = subject) |>
count(unique_id) |>
filter(n == 2) |>
select(unique_id)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "yes" ~ NA_character_,
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) |>
select(unique_id, gender)
# basic tidying
data_amp_tidied <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, block_type, rt) |>
filter(block_type == "test")
# are there duplicates or incomplete data?
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_complete_amp <- data_amp_tidied |>
count(unique_id, name = "n_trials") |>
filter(n_trials == 72)
data_amp_tidied_complete <- data_amp_tidied |>
semi_join(data_complete_amp, by = "unique_id")
# are there duplicates or incomplete data?
# sanity check should have one row
data_amp_tidied_complete |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_amp_performance_criteria <- data_amp_tidied_complete |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
# for each participant...
group_by(unique_id) |>
# ... summarize the percent of fast trials
summarise(percent_fast_trials = mean(fast_trial)*100) |>
# flag unique_ids that have too many fast trials
mutate(exclude_amp_performance = ifelse(percent_fast_trials > 10, "exclude", "include"))
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions")
View(data_selfreport_tidied)
data_selfreport_homework <- data_selfreport_tidied |>
mutate(response = case_when(response, !c(1:7)))
data_selfreport_homework <- data_selfreport_tidied |>
mutate(response = na.if(response, !c(1:7)))
data_selfreport_homework <- data_selfreport_tidied |>
mutate(response = na_if(response, !c(1:7)))
data_selfreport_homework <- data_selfreport_tidied |>
mutate(response = ifelse(response %in% 1:7, response, NA))
View(data_selfreport_tidied)
View(data_selfreport_tidied)
View(data_selfreport_raw)
View(data_selfreport_homework)
View(data_amp_tidied_complete)
data_selfreport_homework <- data_selfreport_tidied |>
mutate(response = ifelse(response %in% 1:7, response, NA)) |>
group_by(response) |>
summarise(unique_count = n_distinct(unique_id))
ummarise(unique_count = n_distinct(unique_id))
summarise(unique_count = n_distinct(unique_id))
View(data_selfreport_tidied)
data_selfreport_homework <- data_selfreport_tidied |>
mutate(response = ifelse(response %in% 1:7, response, NA))
data_selfreport_homework <- data_selfreport_tidied |>
mutate(response = ifelse(response %in% 1:7, response, NA)) |>
#count number of unique_ids with correct/wrong number of responses
group_by(response) |>
summarise(unique_count = n_distinct(unique_id))
?anti_join
data_selfreport_response_tidied <- data_selfreport_tidied |>
mutate(response = ifelse(response %in% 1:7, response, NA)) |>
#count number of unique_ids with correct/wrong number of responses
group_by(response) |>
summarise(unique_count = n_distinct(unique_id))
data_selfreport_response_tidied <- data_selfreport_tidied |>
mutate(response = ifelse(response %in% 1:7, response, NA))
View(data_selfreport_tidied)
View(data_selfreport_response_tidied)
#count number of unique_ids with correct/wrong number of responses
data_selfreport_unique_ids_resultscount <- data_selfreport_response_tidied
View(data_selfreport_homework)
#Exclude them
data_selfreport_excluded_ids<- data_selfreport_homework |>
filter(is.na(response))
View(data_selfreport_excluded_ids)
#Exclude them
data_selfreport_excluded_ids<- data_selfreport_homework |>
filter(is.na(response)) |>
select(unique_id)
#Exclude them
data_selfreport_excluded_ids<- data_selfreport_response_tidied |>
filter(is.na(response)) |>
select(unique_id)
data_selfreport_excluded <- data_selfreport_response_tidied |>
anti_join(data_selfreport_excluded_ids)
data_selfreport_excluded <- data_selfreport_response_tidied |>
anti_join(data_selfreport_excluded_ids, by = unique_id)
data_selfreport_excluded <- data_selfreport_response_tidied |>
anti_join(data_selfreport_excluded_ids, by = "unique_id")
View(data_selfreport_excluded)
#check your exclusions worked
check_exclusions <- data_selfreport_excluded |>
summarise(unique_ids_left= n_distinct(unique_id) )
View(check_exclusions)
View(data_selfreport_excluded_ids)
#count number of unique_ids with correct/wrong number of responses
data_selfreport_unique_ids_resultscount <- data_selfreport_response_tidied
View(data_selfreport_unique_ids_resultscount)
#count number of unique_ids with correct/wrong number of responses
data_selfreport_unique_ids_resultscount <- data_selfreport_response_tidied
ata_selfreport_unique_ids_resultscount <- data_selfreport_response_tidied
group_by(response) |>
summarise(unique_count = n_distinct(unique_id))
data_selfreport_response_tidied <- data_selfreport_tidied |>
mutate(response = ifelse(response %in% 1:7, response, NA))
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions")
data_selfreport_response_tidied <- data_selfreport_tidied |>
mutate(response = ifelse(response %in% 1:7, response, NA))
View(data_selfreport_tidied)
View(data_selfreport_response_tidied)
#count number of unique_ids with correct/wrong number of responses
data_selfreport_unique_ids_resultscount <- data_selfreport_response_tidied
#count number of unique_ids with correct/wrong number of responses
data_selfreport_unique_ids_resultscount <- data_selfreport_response_tidied |>
group_by(response) |>
summarise(unique_count = n_distinct(unique_id))
View(data_selfreport_unique_ids_resultscount)
#Exclude them
data_selfreport_excluded_ids<- data_selfreport_response_tidied |>
filter(is.na(response)) |>
select(unique_id)
View(data_selfreport_excluded_ids)
#check your exclusions worked
check_exclusions <- data_selfreport_excluded |>
summarise(unique_ids_left= n_distinct(unique_id))
#Exclude them
data_selfreport_excluded_ids<- data_selfreport_response_tidied |>
filter(is.na(response)) |>
select(unique_id)
data_selfreport_excluded <- data_selfreport_response_tidied |>
anti_join(data_selfreport_excluded_ids, by = "unique_id")
View(data_selfreport_excluded)
#check your exclusions worked
check_exclusions <- data_selfreport_excluded |>
summarise(unique_ids_left= n_distinct(unique_id))
View(check_exclusions)
#check your exclusions worked
check_exclusions <- data_selfreport_excluded |>
group_by(response)|>
summarise(unique_ids_left= n_distinct(unique_id))
View(data_selfreport_unique_ids_resultscount)
