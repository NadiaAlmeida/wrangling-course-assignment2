knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# Dependencies
```{r}
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_amp_raw)
nrow(data_selfreport_raw)
nrow(data_demographics_raw)
View(data_amp_raw)
View(data_demographics_raw)
# use a function without the pipe
example_without_pipe <- clean_names(data_demographics_raw)
# use a function with the pipe.
example_with_pipe <- data_demographics_raw %>%
clean_names()
# check they produce identical results
identical(example_without_pipe, example_with_pipe)
# use a series of functions with the pipe
example2_with_pipe <- data_amp_raw |>
clean_names() |>
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode,
rt = latency)
View(example2_with_pipe)
# use a series of functions with the pipe
example2_with_pipe <- data_amp_raw |>
clean_names() |>
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode,
rt = latency) |>
mutate(fast_trial = ifelse(rt < 100, 1, 0))
# use a series of functions with the pipe
example2_with_pipe <- data_amp_raw |>
clean_names() |>
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode,
rt = latency) |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
group_by(unique_id)
# use a series of functions with the pipe
example2_with_pipe <- data_amp_raw |>
clean_names() |>
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode,
rt = latency) |>
mutate(fast_trial = ifelse(rt < 100, 1, 0)) |>
group_by(unique_id) |>
summarise(percent_fast_trials = mean(fast_trial)*100)
# check they produce identical results
identical(example2_without_pipe, example2_with_pipe)
# use a series of functions without the pipe
example2_without_pipe <- summarise(group_by(mutate(rename(clean_names(dat = data_amp_raw), unique_id = subject, block = blockcode, trial_type = trialcode, rt = latency), fast_trial = ifelse(rt < 100, 1, 0)), unique_id), percent_fast_trials = mean(fast_trial)*100)
# check they produce identical results
identical(example2_without_pipe, example2_with_pipe)
data_demographics_clean_names <- clean_names(data_demographics_raw)
data_selfreport_clean_names <- clean_names(data_selfreport_raw)
data_amp_clean_names <- clean_names(data_amp_raw)
# print all column names
colnames(data_demographics_clean_names)
# print all column names as a vector
dput(colnames(data_demographics_clean_names))
# print all column names as a vector using the pipe
data_demographics_clean_names %>%
colnames() %>%
dput()
#data_selfreport_clean_names
data_selfreport_clean_names |>
colnames() |>
dput
#data_selfreport_clean_names
data_selfreport_clean_names |>
colnames() |>
dput()
#data_amp_clean_names
data_amp_clean_names |>
colnames() |>
dput()
data_demographics_renamed <- data_demographics_clean_names %>%
rename(unique_id = subject,
item = trialcode)
data_selfreport_renamed <- data_selfreport_clean_names %>%
rename(unique_id = subject,
item = trialcode)
data_amp_renamed <- data_amp_clean_names %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode)
data_demographics_selected_columns <- data_demographics_renamed %>%
select(unique_id, item, response)
data_selfreport_selected_columns <- data_selfreport_renamed %>%
select(unique_id, item, response)
data_amp_selected_columns <- data_amp_renamed %>%
select(unique_id, block, trial_type, correct, latency)
# remove all objects in environment
rm(list = ls())
data_demographics_trimmed <- read_csv("../data/raw/data_demographics_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_selfreport_trimmed <- read_csv("../data/raw/data_selfreport_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_amp_trimmed <- read_csv("../data/raw/data_amp_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode) %>%
select(unique_id, block, trial_type, correct, latency)
data_demographics_trimmed <- read_csv("../data/raw/data_demographics_raw.csv") |>
clean_names() |>
rename(unique_id = subject,
item = trialcode) |>
select(unique_id, item, response)
data_amp_trimmed <- read_csv("../data/raw/data_amp_raw.csv") |>
clean_names() |>
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode) |>
select(unique_id, block, trial_type, correct, latency)
data_selfreport_trimmed <- read_csv("../data/raw/data_selfreport_raw.csv") |>
clean_names() |>
rename(unique_id = subject,
item = trialcode) |>
select(unique_id, item, response)
data_demographics_trimmed %>%
count(item)
data_demographics_trimmed %>%
count(response)
View(data_amp_trimmed)
View(data_demographics_trimmed)
View(data_selfreport_trimmed)
data_selfreport_trimmed |>
count(item)
data_selfreport_trimmed |>
count(response)
View(data_amp_trimmed)
data_amp_trimmed |>
count(block)
data_amp_trimmed |>
count(trial_type)
data_amp_trimmed |>
count(correct)
data_amp_trimmed |>
count(latency)
data_demographics_trimmed %>%
count(item, response)
data_demographics_trimmed %>%
count(item, response) %>%
arrange(desc(n)) # arrange in descending order
View(data_selfreport_trimmed)
data_selfreport_trimmed |>
count(item)
data_selfreport_filtered <- data_selfreport_trimmed |>
filter(item %in% c("postitive", "prefer", "like"))
#check it worked
data_selfreport_filtered |>
count(item)
data_selfreport_filtered <- data_selfreport_trimmed |>
filter(item %in% c("positive", "prefer", "like"))
#check it worked
data_selfreport_filtered |>
count(item)
data_amp_trimmed |>
count(item)
data_amp_trimmed |>
count(block)
data_amp_trimmed |>
count(block, trial_type)
data_amp_filtered <- data_amp_trimmed |>
filter(block == "test" & trial_type != "instructions")
data_amp_filtered|>
count(block, trial_type)
data_amp_trimmed |>
count(block, trial_type)
View(data_amp_filtered)
data_amp_test_trials<- data_amp_trimmed |>
filter(block == "test" & trial_type != "instructions")
data_amp_test_trials|>
count(block, trial_type)
data_amp_with_fast_trials <- data_amp_test_trials|>
mutate(fast_trial = latency < 100)
View(data_amp_with_fast_trials)
View(data_demographics_trimmed)
data_demographics_trimmed |>
filter(item=="age")
data_demographics_trimmed |>
filter(item=="age")|>
count(age)
data_demographics_trimmed |>
filter(item == "age") |>
count(response)
data_demographics_clean_age |>
mutate(response = ifelse(response == "old", NA, response ))
data_demographics_clean_age <- data_demographics_trimmed |>
mutate(response = ifelse(response == "old", NA, response))
View(data_demographics_trimmed)
View(data_demographics_clean_age)
data_demographics_clean_age <- data_demographics_trimmed |>
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response))
data_demographics_clean_age <- data_demographics_trimmed |>
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) |>
filter(item == "age")
data_demographic_clean_age |>
count(response)
data_demographics_clean_age |>
count(response)
data_demographics_clean_age <- data_demographics_trimmed |>
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) |>
filter(item == "age")|>
rename(age = response)
data_demographics_clean_age |>
count(age)
data_demographics_clean_age <- data_demographics_trimmed |>
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) |>
select(unique_id, age = response)
data_demographics_clean_age <- data_demographics_trimmed |>
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) |>
filter(item == "age")|>
rename(age = response)
data_demographics_clean_age |>
count(age)
data_selfreport_trials <- data_selfreport_trimmed |>
filter(item %in% c("positive", "prefer", "like"))
#check it worked
data_selfreport_trials |>
count(item)
data_selfreport_trials |>
count(response)
data_selfreport_cleaned |>
mutate(response = ifelse(response %in% c("1", "2", "3", "4", "5", "6", "7"), response, NA),
response = as.numeric(response))
data_selfreport_cleaned <- data_selfreport_trialsb|>
mutate(response = ifelse(response %in% c("1", "2", "3", "4", "5", "6", "7"), response, NA),
response = as.numeric(response))
data_selfreport_cleaned <- data_selfreport_trials|>
mutate(response = ifelse(response %in% c("1", "2", "3", "4", "5", "6", "7"), response, NA),
response = as.numeric(response))
data_selfreport_cleaned <- data_selfreport_trials|>
mutate(response = ifelse(response %in% 1:7, response, NA),
response = as.numeric(response))
data_selfreport_cleaned |>
count(response)
data_amp_cleaned <- data_amp_with_fast_trials |>
mutate(correct = case_when(trial_type == "prime_positive" ~ correct,
trial_type == "prime_negative" & correct == 1 ~ 0,
trial_type == "prime_negative" & correct == 0 ~ 1))
round(0.5)
round(1.5)
round(2.5)
round(3.5)
round(4.5)
round(5.5)
round_half_up(0.5)
round_half_up(1.5)
round_half_up(2.5)
round_half_up(3.5)
round_half_up(4.5)
round_half_up(5.5)
# mean
data_demographics_age_tidy %>%
summarize(mean_age = mean(age, na.rm = TRUE))
# mean
data_demographics_age_cleaned %>%
summarize(mean_age = mean(age, na.rm = TRUE))
# mean
data_demographics_age_clean %>%
summarize(mean_age = mean(age, na.rm = TRUE))
View(data_demographics_trimmed)
View(data_demographics_clean_age)
# mean
data_demographics_clean_age %>%
summarize(mean_age = mean(age, na.rm = TRUE))
# SD
data_demographics_clean_age %>%
summarize(sd_age = sd(age, na.rm = TRUE))
# mean and SD with rounding, illustrating how multiple summarizes can be done in one function call
data_demographics_clean_age %>%
summarize(mean_age = mean(age, na.rm = TRUE),
mean_age = round_half_up(mean_age, digits = 2),
sd_age = sd(age, na.rm = TRUE),
sd_age = round_half_up(sd_age, digits = 2))
View(data_selfreport_cleaned)
data_selfreport_tidy <- data_selfreport_cleaned |>
group_by(unique_id) %>%
summarise(
mean_score = mean(c(like, positive, prefer), na.rm = TRUE),
item_count = sum(!is.na(c(like, positive, prefer))),
complete_data = ifelse(item_count == 3, TRUE, FALSE)
)
data_selfreport_tidy <- data_selfreport_cleaned |>
group_by(unique_id) %>%
summarise(
mean_score = mean(c("like", "positive", "prefer"), na.rm = TRUE),
item_count = sum(!is.na(c(like, positive, prefer))),
complete_data = ifelse(item_count == 3, TRUE, FALSE)
)
data_selfreport_tidy <- data_selfreport_cleaned |>
group_by(unique_id) %>%
summarise(
mean_score = mean(c("like", "positive", "prefer"), na.rm = TRUE),
item_count = sum(!is.na(c("like", "positive", "prefer"))),
complete_data = ifelse(item_count == 3, TRUE, FALSE)
)
data_selfreport_tidy <- data_selfreport_cleaned |>
group_by(unique_id)|>
summarise(
mean_score = mean(c("like", "positive", "prefer"), na.rm = TRUE),
item_count = sum(!is.na(c("like", "positive", "prefer"))),
complete_data = ifelse(item_count == 3, TRUE, FALSE)
)
data_selfreport_tidy <- data_selfreport_cleaned |>
group_by(unique_id)|>
summarise(
mean_score = mean(response, na.rm = TRUE),
item_count = sum(!is.na(c("like", "positive", "prefer"))),
complete_data = ifelse(item_count == 3, TRUE, FALSE)
)
View(data_selfreport_trimmed)
View(data_selfreport_trials)
View(data_selfreport_tidy)
View(data_selfreport_tidy)
data_selfreport_tidy_final <- data_selfreport_tidy|>
filter(complete_data = TRUE)
View(data_selfreport_tidy_final)
data_selfreport_tidy_final <- data_selfreport_tidy|>
filter(complete_data = TRUE) |>
mean_selfreport <- mean(data_selfreport_tidy_final)
data_selfreport_tidy_final <- data_selfreport_tidy|>
filter(complete_data = TRUE) |>
mean(data_selfreport_tidy_final)
data_selfreport_tidy_final <- data_selfreport_tidy|>
filter(complete_data = TRUE)
mean(data_selfreport_tidy_final)
mean(data_selfreport_tidy_final, na.rm= TRUE)
mean(data_selfreport_tidy_final$mean_score, na.rm= TRUE)
sd(data_selfreport_tidy_final$mean_score, na.rm = TRUE)
data_amp_tidy<- data_amp_cleaned |>
group_by(unique_id) |>
summarise(
prep_prime_congruent = mean(correct, na.rm = TRUE)
)
View(data_amp_tidy)
data_amp_tidy<- data_amp_cleaned |>
group_by(unique_id) |>
summarise(
prop_prime_congruent = mean(correct, na.rm = TRUE),
prop_too_fast = mean(too_fast, na.rm = TRUE)
)
View(data_amp_cleaned)
data_amp_tidy<- data_amp_cleaned |>
group_by(unique_id) |>
summarise(
prop_prime_congruent = mean(correct, na.rm = TRUE),
prop_too_fast = mean(fast_trial, na.rm = TRUE)
)
data_amp_tidy<- data_amp_cleaned |>
group_by(unique_id) |>
summarise(
prop_prime_congruent = mean(correct, na.rm = TRUE),
prop_too_fast = mean(fast_trial, na.rm = TRUE)) |>
mutate(exclude_amp = ifelse(prop_too_fast > 0.10, "exclude", prop_too_fast))
data_amp_tidy<- data_amp_cleaned |>
group_by(unique_id) |>
summarise(
prop_prime_congruent = mean(correct, na.rm = TRUE),
prop_too_fast = mean(fast_trial, na.rm = TRUE))
data_amp_tidy<- data_amp_cleaned |>
group_by(unique_id) |>
summarise(
prop_prime_congruent = mean(correct, na.rm = TRUE),
prop_too_fast = mean(fast_trial, na.rm = TRUE)) |>
mutate(exclude_amp = ifelse(prop_too_fast > 0.10, "exclude", prop_too_fast))
sum(data_amp_tidy$exclude_amp == "exclude")
proportion_excluded<- sum(data_amp_tidy$exclude_amp == "exclude") / nrow(data_amp_tidy)
#proportion_excluded
sum(data_amp_tidy$exclude_amp == "exclude") / nrow(data_amp_tidy)
